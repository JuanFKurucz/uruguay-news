[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "uruguay-news-backend"
version = "0.1.0"
description = "Backend API for Uruguay News - Google Cloud Functions with AI-powered sentiment analysis"
authors = [
    {name = "Uruguay News Team", email = "contact@uruguay-news.org"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["news", "ai", "sentiment-analysis", "bias-detection", "uruguay", "google-cloud", "backend", "api"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: News/Diary",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

# Core dependencies for Google Cloud serverless architecture
dependencies = [
    # Google Cloud Functions and services
    "functions-framework>=3.5.0",
    "google-cloud-firestore>=2.13.0",
    "google-cloud-storage>=2.10.0",
    "google-cloud-logging>=3.8.0",
    "google-cloud-monitoring>=2.16.0",
    "google-cloud-bigquery>=3.13.0",
    "google-cloud-redis>=2.13.0",
    
    # FastAPI for Cloud Functions
    "fastapi>=0.104.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # AI/ML libraries
    "openai>=1.3.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.2",
    "transformers>=4.36.0",
    "torch>=2.1.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    
    # Web scraping and content processing
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "feedparser>=6.0.0",
    "newspaper3k>=0.2.8",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "redis>=5.0.0",
    "httpx>=0.25.0",
    "uvicorn>=0.24.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]

# Testing with Google Cloud emulators
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "google-cloud-testutils>=1.3.0",
    "testcontainers>=3.7.0",
    "pytest-xdist>=3.5.0",              # Parallel testing
    "pytest-benchmark>=4.0.0",          # Performance testing
    "factory-boy>=3.3.0",               # Test data factories
    "freezegun>=1.2.0",                 # Time mocking
    "responses>=0.24.0",                # HTTP mocking
]

# Production monitoring and observability
monitoring = [
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sentry-sdk>=1.38.0",
]

# Security and validation
security = [
    "python-jose[cryptography]>=3.3.0",  # JWT handling
    "passlib[bcrypt]>=1.7.4",           # Password hashing
    "cryptography>=41.0.0",             # Encryption utilities
    "httpx-oauth>=0.11.0",              # OAuth integration
    "slowapi>=0.1.9",                   # Rate limiting
]

[project.urls]
Homepage = "https://juanfkurucz.github.io/uruguay-news"
Documentation = "https://juanfkurucz.github.io/uruguay-news/docs"
Repository = "https://github.com/juanfkurucz/uruguay-news"
Issues = "https://github.com/juanfkurucz/uruguay-news/issues"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.black]
target-version = ['py311']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ai: marks tests as AI/ML model tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 